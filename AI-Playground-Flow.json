[
    {
        "id": "07e8dd0a25cf922c",
        "type": "comment",
        "z": "17979232dade4e09",
        "name": "AI Playground",
        "info": "",
        "x": 750,
        "y": 100,
        "wires": []
    },
    {
        "id": "0b9f3de4f082341e",
        "type": "inject",
        "z": "17979232dade4e09",
        "name": "on StartUp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "FilePath",
                "v": "uibuilder/ai-playground/src/index.html",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 160,
        "wires": [
            [
                "97fd31462a0a5375"
            ]
        ]
    },
    {
        "id": "97fd31462a0a5375",
        "type": "template",
        "z": "17979232dade4e09",
        "name": "index.html",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<!DOCTYPE html>\n<html lang=\"en\" charset=\"utf-8\" style=\"width:100%\">\n\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\n  <meta name=\"viewport\" content=\"minimal-ui, width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n\n  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n  <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\n  <meta name=\"format-detection\" content=\"telephone=no\">\n\n  <style name=\"mobile-prologue\">\n    html {\n      text-size-adjust: 100%;\n      -moz-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n      -o-text-size-adjust: 100%;\n      -ms-text-size-adjust: 100%;\n    }\n\n    html,\n    body {\n      width: 99%;\n      height: 99%;\n    }\n\n    html {\n      overflow: hidden scroll\n    }\n  </style>\n\n  <link rel=\"icon\" href=\"../uibuilder/images/node-blue.ico\">\n\n  <script type=\"importmap\">\n    {\n    \"imports\": {\n      \"javascript-interface-library\": \"https://rozek.github.io/node-red-ai-toolkit/js/javascript-interface-library.esm.js\",\n      \"JIL\":                          \"https://rozek.github.io/node-red-ai-toolkit/js/javascript-interface-library.esm.js\",\n\n      \"preact-with-htm\": \"https://rozek.github.io/node-red-ai-toolkit/js/preact-with-htm.esm.js\"\n    }\n  }\n  </script>\n\n  <style name=\"white-textured-background\">\n    html,\n    body {\n      background-color: white;\n      background-image: url(https://rozek.github.io/node-red-ai-toolkit/common/BinaryTexture_white.jpg);\n      background-repeat: repeat;\n\n      font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n      font-size: 14px;\n      font-weight: 400;\n      color: #111111;\n      line-height: 150%;\n    }\n\n    body {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 300px;\n      margin: 0px;\n      padding: 0px;\n    }\n\n    * {\n      -moz-box-sizing: border-box;\n      -webkit-box-sizing: border-box;\n      box-sizing: border-box;\n    }\n  </style>\n\n\n  <script type=\"module\">\n    import { render, html, signal, effect, Component } from 'preact-with-htm'\n\n  import '../uibuilder/uibuilder.esm.min.js'// adds `uibuilder` & `$` to globals\n\n/**** global State - these variable may be changed by incoming messages ****/\n\n  const availableModels   = signal([])\n  const AssistantResponse = signal('')\n  const StatusMessage     = signal('(n/a)')\n\n/**** handling of incoming messages ****/\n\n  uibuilder.onChange('msg', (msg) => {\n    console.log('incoming uibuilder msg',msg)\n    switch (msg.topic) {\n      case 'reload-web-page': reloadPage(); break\n      case 'model-list':      availableModels.value   = msg.payload.slice(); break\n      case 'chat-completion': AssistantResponse.value = msg.payload; break\n      case 'status-message':  StatusMessage.value     = msg.payload || '(n/a)'; break\n    }\n  })\n\n  function reloadPage () {\n    const newLocation = (\n      /^[?]([^&]+&)*_=\\d+(&|$)/.test(window.location.search || '')\n      ? window.location.href.replace(/_=\\d+/,'_=' + Date.now())\n      : window.location.href + '?_=' + Date.now()\n    )\n    window.location.href = newLocation\n  }\n\n/**** settings which are changed internally only ****/\n\n  let Threads = 4, Batches = 8\n  let ContextLength = 512, keep = 0, PredictionLength = 128\n  let Seed = -1, topK = 40, topP = 0.9, Temperature = 0.8\n  let Grammar = ''\n\n/**** ArenaView ****/\n\n  class ArenaView extends Component {\n    state = { Model:'', SystemPrefix:'', UserInput:'' }\n\n    render (PropSet) {\n      if ((this.state.Model === '') && (availableModels.value.length > 0)) {\n        this.state.Model = availableModels.value[0]\n      }\n\n      const onModelChange = (Event) => {\n        const Element     = Event.target\n        const chosenModel = Element.options[Element.selectedIndex].value\n        this.setState({ ...this.state, Model:chosenModel })\n      }\n\n      function onThreadsInput (Event)     { Threads          = parseInt(Event.target.value,10) }\n      function onBatchesInput (Event)     { Batches          = parseInt(Event.target.value,10) }\n      function onContextInput (Event)     { ContextLength    = parseInt(Event.target.value,10) }\n      function onPredictionInput (Event)  { PredictionLength = parseInt(Event.target.value,10) }\n      function onSeedInput (Event)        { Seed             = parseInt(Event.target.value,10) }\n      function onTopKInput (Event)        { topK             = parseInt(Event.target.value,10) }\n      function onTopPInput (Event)        { topP             = parseFloat(Event.target.value) }\n      function onTemperatureInput (Event) { Temperature      = parseFloat(Event.target.value) }\n      function onGrammarInput (Event)     { Grammar          = Event.target.value }\n\n      const onSystemInput = (Event) => {\n        this.setState({ ...this.state, SystemPrefix:Event.target.value })\n      }\n\n      const onUserInput = (Event) => {\n        this.setState({ ...this.state, UserInput:Event.target.value })\n      }\n\n      const submit = (Event) => {\n        const { Model,SystemPrefix,UserInput } = this.state\n\n        const MessageList = [{ role:'user', content:UserInput }]\n        if (SystemPrefix.trim() !== '') {\n          MessageList.unshift({ role:'system', content:SystemPrefix })\n        }\n\n        AssistantResponse.value = ''\n\n        uibuilder.send({\n          'topic': 'complete-chat', Threads, Batches,\n          Model, ContextLength, keep, PredictionLength,\n          Seed, topK, topP, Temperature, Grammar,\n          'payload':MessageList,\n        })\n      }\n\n      const readyForSubmit = (\n        (this.state.Model !== '') && (this.state.UserInput !== '')\n      )\n\n      return html`<div style=\"\n        display:flex; position:absolute; flex-flow:column nowrap; align-items:stretch;\n        left:0px; top:0px; right:0px; bottom:0px;\n      \">\n        <div style=\"flex:0 0 auto; font-size:22px\">Node-RED AI Playground</div>\n          <div style=\"flex:0 0 auto; height:10px\"/>\n        <div style=\"flex:0 0 auto\">\n          This is just a simple example for the<span> </span>\n          <a href=\"https://github.com/rozek/node-red-ai-toolkit\">node-red-ai-toolkit</a>.<span> </span>\n          Please visit<span> </span>\n          <a href=\"https://github.com/rozek/node-red-ai-playground\">node-red-ai-playground</a><span> </span>\n          to learn how to install this tool and run everything on your\n          own machine.\n        </div>\n          <div style=\"flex:0 0 auto; height:10px\"/>\n        <div>\n          Model:\n          <select onChange=${onModelChange} style=\"margin-left:10px; min-width:120px\">\n            ${availableModels.value.map(\n              (Model) => html`<option>${Model}</option>`\n            )}\n          </select>\n        </div>\n          <div style=\"flex:0 0 auto; height:10px\"/>\n        <div style=\"flex:0 0 auto\">Settings:</div>\n        <table style=\"flex:0 0 auto\"><tbody>\n          <tr valign=top>\n            <td>Threads:</td>\n            <td><input type=\"number\" onInput=${onThreadsInput} min=1 max=100 value=${Threads} step=1/></td>\n            <td>Batches:</td>\n            <td><input type=\"number\" onInput=${onBatchesInput} min=1 max=100 value=${Batches} step=1/></td>\n            <td>Context:</td>\n            <td><input type=\"number\" onInput=${onContextInput}    min=1 max=4096 value=${ContextLength} step=1/></td>\n            <td>predict:</td>\n            <td><input type=\"number\" onInput=${onPredictionInput} min=1 max=4096 value=${PredictionLength} step=1/></td>\n          </tr>\n          <tr valign=top>\n            <td>Seed:</td>\n            <td><input type=\"number\" onInput=${onSeedInput}    min=-1 max=1000000 value=${Seed} step=1/></td>\n            <td>Top K:</td>\n            <td><input type=\"number\" onInput=${onTopKInput} min=1 max=100 value=${topK} step=1/></td>\n            <td>Top P:</td>\n            <td><input type=\"number\" onInput=${onTopPInput} min=0.01 max=1.00 value=${topP} step=0.01/></td>\n            <td>Temperature:</td>\n            <td><input type=\"number\" onInput=${onTemperatureInput} min=0.01 max=1.00 value=${Temperature} step=0.01/></td>\n          </tr>\n          <tr valign=top>\n            <td>Grammar:</td>\n            <td colspan=\"7\"><textarea onInput=${onGrammarInput} style=\"\n              width:100%\n            \"></textarea></td>\n          </tr>\n        </tbody></table>\n\n        <div style=\"flex:0 0 auto\">System Prefix</div>\n        <textarea onInput=${onSystemInput} style=\"flex:1 0 auto\"></textarea>\n          <div style=\"flex:0 0 auto; height:10px\"/>\n        <div style=\"flex:0 0 auto\">User Input</div>\n        <textarea onInput=${onUserInput} style=\"flex:1 0 auto\"></textarea>\n        <button disabled=${! readyForSubmit}\n          style=\"flex:0 0 auto; width:120px; height:30px; margin-top:10px\"\n          onClick=${submit}\n        ><b>Submit</b></button>\n        <div style=\"flex:0 0 auto; margin-top:10px\">Assistant Response</div>\n        <textarea readonly style=\"flex:1 0 auto\">${AssistantResponse.value}</textarea>\n        <div style=\"margin-top:10px\">${StatusMessage.value}</div>\n      </div>`\n    }\n  }\n\n  render(html`<${ArenaView}/>`,document.getElementById('Arena'))\n  console.log('page was loaded, URL = ' + window.location)\n\n  uibuilder.send({ 'topic':'list-models', 'payload':'' })\n  console.log('model-list was requested')\n  </script>\n</head>\n\n<body>\n\n  <div id=\"Arena\" style=\"\n    display:inline-block; position:relative;\n    width:600px; height:100%; min-height:300px;\n    margin:0px; padding:0px;\n  \"></div>\n</body>\n\n</html>",
        "output": "str",
        "x": 950,
        "y": 160,
        "wires": [
            [
                "73b37aaabd60422a"
            ]
        ]
    },
    {
        "id": "73b37aaabd60422a",
        "type": "function",
        "z": "17979232dade4e09",
        "name": "for /ai-playground",
        "func": "  let Contents = '' + (msg.payload || '')\n\n  let FilePath = ('' + (msg.FilePath || '')).trim()\n  if (FilePath === '') {\n    throw new Error('no file output path given')\n  }\n\n/**** write payload to file ****/\n\n  fs.writeFileSync(\n    path.join(process.env.HOME + '/.node-red',FilePath),Contents\n  )\n\n  node.status({ fill:'green', shape:'dot', text:'file written' })\n\n  Object.assign(msg,{\n    topic:  'reload-web-page',\n    payload:'',\n  })\n\n  return msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "path",
                "module": "path"
            },
            {
                "var": "process",
                "module": "process"
            }
        ],
        "x": 1150,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "2c3e5dbfbc4cbb55",
        "type": "uibuilder",
        "z": "17979232dade4e09",
        "name": "",
        "topic": "",
        "url": "ai-playground",
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "esm-blank-client",
        "extTemplate": "",
        "showfolder": false,
        "reload": true,
        "sourceFolder": "src",
        "deployedVersion": "6.6.0",
        "showMsgUib": true,
        "title": "",
        "descr": "",
        "x": 980,
        "y": 220,
        "wires": [
            [
                "1dc3f20d069a7def",
                "098c723a800f9b06"
            ],
            []
        ]
    },
    {
        "id": "478d079465ec1a25",
        "type": "inject",
        "z": "17979232dade4e09",
        "name": "manual Reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "reload-web-page",
        "payload": "(n/a)",
        "payloadType": "str",
        "x": 780,
        "y": 220,
        "wires": [
            [
                "2c3e5dbfbc4cbb55"
            ]
        ]
    },
    {
        "id": "c277612647472627",
        "type": "reusable",
        "z": "17979232dade4e09",
        "name": "list_models",
        "target": "node-red-ai-toolkit:list_models",
        "outputs": 2,
        "x": 950,
        "y": 280,
        "wires": [
            [
                "0a31c88cf4bc93e5"
            ],
            [
                "0d20a236464eb9ab"
            ]
        ],
        "outputLabels": [
            "success",
            "failure"
        ]
    },
    {
        "id": "0a31c88cf4bc93e5",
        "type": "change",
        "z": "17979232dade4e09",
        "name": "send model-list",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "model-list",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 280,
        "wires": [
            [
                "0781ac5b369a8414",
                "2c3e5dbfbc4cbb55"
            ]
        ]
    },
    {
        "id": "1dc3f20d069a7def",
        "type": "switch",
        "z": "17979232dade4e09",
        "name": "list-models",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "list-models",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 280,
        "wires": [
            [
                "c277612647472627",
                "5b748f06d6517268"
            ]
        ]
    },
    {
        "id": "098c723a800f9b06",
        "type": "switch",
        "z": "17979232dade4e09",
        "name": "complete-chat",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "complete-chat",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 780,
        "y": 400,
        "wires": [
            [
                "76419d69f0c7e9d4",
                "e002495f72524dfa"
            ]
        ]
    },
    {
        "id": "76419d69f0c7e9d4",
        "type": "reusable",
        "z": "17979232dade4e09",
        "name": "complete-chat",
        "target": "node-red-ai-toolkit:complete_chat",
        "outputs": 2,
        "x": 980,
        "y": 400,
        "wires": [
            [
                "01acd1b7730edf4e"
            ],
            [
                "0d20a236464eb9ab"
            ]
        ]
    },
    {
        "id": "0d20a236464eb9ab",
        "type": "debug",
        "z": "17979232dade4e09",
        "name": "internal error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 520,
        "wires": []
    },
    {
        "id": "01acd1b7730edf4e",
        "type": "change",
        "z": "17979232dade4e09",
        "name": "send response",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "chat-completion",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 400,
        "wires": [
            [
                "5d193d9115024282",
                "2c3e5dbfbc4cbb55"
            ]
        ]
    },
    {
        "id": "5b748f06d6517268",
        "type": "change",
        "z": "17979232dade4e09",
        "name": "\"looking for models\"",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "status-message",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "looking for models",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 340,
        "wires": [
            [
                "2c3e5dbfbc4cbb55"
            ]
        ]
    },
    {
        "id": "0781ac5b369a8414",
        "type": "change",
        "z": "17979232dade4e09",
        "name": "\"models loaded\"",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "status-message",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "models loaded",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 340,
        "wires": [
            [
                "2c3e5dbfbc4cbb55"
            ]
        ]
    },
    {
        "id": "e002495f72524dfa",
        "type": "change",
        "z": "17979232dade4e09",
        "name": "\"computing response\"",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "status-message",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "computing response",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 460,
        "wires": [
            [
                "2c3e5dbfbc4cbb55"
            ]
        ]
    },
    {
        "id": "5d193d9115024282",
        "type": "change",
        "z": "17979232dade4e09",
        "name": "\"finished\"",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "status-message",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "finished",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 460,
        "wires": [
            [
                "2c3e5dbfbc4cbb55"
            ]
        ]
    }
]